#!/usr/bin/env perl

use strict;
use warnings;
use 5.10.0;

# standard modules
use Data::Dumper;
use FindBin;

# non standard modules that should be available as packages even on rhel-6
use Config::Tiny;
use DBI;
use DBD::Pg qw(:async);
use JSON qw(decode_json encode_json);
use File::Basename qw(basename);
use Getopt::Long;

# JobCenter
#use lib "$FindBin::Bin/../lib";
#use JobCenter::SimpleClient;

my $pgh;
my %actions;

exit main();

sub help {
	my $prog = basename $0;
	print <<__END;
usage: $prog [options] <job_id>

    view steps taken by a given job_id

options:

    -t,--time   show absolute start times
__END
	return 0;
}

sub main {
	binmode(STDOUT, ":utf8");

	my %opts;
	GetOptions(
		'help'   => sub { exit help() },
		'time'   => \$opts{time},
	) or die "error in command line arguments\n";

	exit help() unless @ARGV == 1;

	my $job_id = $ARGV[0];

	my $cfgpath = "$FindBin::Bin/../etc/jobcenter.conf";

	my $cfg = Config::Tiny->read($cfgpath);
	die 'failed to read config ' . $cfgpath . ': ' . Config::Tiny->errstr unless $cfg;
	my $pgdsn = 'dbi:Pg:dbname=' . $cfg->{pg}->{db}
		. (($cfg->{pg}->{host}) ? ';host=' . $cfg->{pg}->{host} : '')
		. (($cfg->{pg}->{port}) ? ';port=' . $cfg->{pg}->{port} : '');
	my $pguser = $cfg->{admin}->{user};
	my $pgpass = $cfg->{admin}->{pass};

	# make our clientname the application_name visible in postgresql
	$ENV{'PGAPPNAME'} = "$0 [$$]";

	$pgh = DBI->connect(
		$pgdsn, $pguser, $pgpass,
		{
			AutoCommit => 1,
			RaiseError => 1,
			PrintError => 0,
		}
	) or die "cannot connect to db: $DBI::errstr";
	$pgh->{pg_placeholder_dollaronly} = 1;

	my $job = $pgh->selectrow_hashref(qq[
		select
			workflow_id, parentjob_id, state, arguments, environment, job_created, job_finished, out_args,
			age(job_finished, job_created) as took, task_id, out_args, variables, task_state, 
			${\(
				$opts{time}
				? "timeout"
				: "extract(epoch from age(timeout, now())) as timeout"
			)},
			${\(
				$opts{time} 
				? "task_entered as started"
				: "extract(epoch from age(task_entered, job_created)) as started" 
			)},
			extract(epoch from age(task_started, task_entered)) as delay
		from jobs where job_id=\$1
		union all select
			workflow_id, parentjob_id, state, arguments, environment, job_created, job_finished, out_args,
			age(job_finished, job_created) as took, null as task_id, out_args, null as variables, null as task_state, 
			null as timeout, null as started, null as delay
		from jobs_archive where job_id=\$2],
		{},
		$job_id, $job_id 
	);

	die "no job $job_id?" unless $job;

	my $wfname = $pgh->selectrow_array(
		q[select name from actions where action_id = $1],
		{},
		$job->{workflow_id}
	);

	say '';
	say "job $job_id workflow \"$wfname\" ($job->{workflow_id})";
	say "    arguments   $job->{arguments}";
	say "    environment $job->{environment}" if $job->{environment};
	say "    parent job  $job->{parentjob_id}" if $job->{parentjob_id};
	say "    started at  $job->{job_created}";

	my $sth = $pgh->prepare(
		qq[select
			*,
			${\(
				$opts{time} 
				? "task_entered as started"
				: "extract(epoch from age(task_entered, \$2)) as started" 
			)},
			extract(epoch from age(task_started, task_entered)) as delay,
			extract(epoch from age(task_completed, task_started)) as duration
		 from job_task_log where job_id=\$1 order by job_task_log_id]
	);
	$sth->execute($job_id, $opts{time} ? () : $job->{job_created}) or die "oergh";

	my $steps = ' 1';

	while ( my $jt = $sth->fetchrow_hashref ) {
		my ($action_id, $type, $name) = get_action($jt->{task_id});
		#print Dumper($jt);
		my @times = map { format_delay($jt->{$_}) } qw/started delay duration/;
		@times = map { $_ // '<null>' } @times;
		say '---------------------------------------------------------';
		if ($type eq 'system') {
			printf "step %s %s\n" => 
				( $steps, $name );
		} else {
			printf "step %s call %s %s (%s)\n" => 
				( $steps, $type, $name, $action_id );
		}	
		say "        started    $times[0]" if $type eq 'system';
		say "        started    $times[0], delay $times[1], duration $times[2]" if $type ne 'system';
		say "        task_state $jt->{task_state}" if $jt->{task_state};
		say "        inargs     $jt->{task_inargs}" if $jt->{task_inargs};
		say "        outargs    $jt->{task_outargs}" if $jt->{task_outargs};
		say "        newvars    $jt->{variables}" if $jt->{variables};
		$steps = sprintf "%2d", $steps + 1;
	}
	$sth = undef;

	if (not $job->{job_finished} and $job->{task_id}) {
		my ($action_id, $type, $name) = get_action($job->{task_id});
		my @times = map { format_delay($job->{$_}) } qw/started delay timeout/;
		say '---------------------------------------------------------  <--- current';
		if ($type eq 'system') {
			say "step $steps $name";
		} else {
			say "step $steps call $type $name ($action_id)";
		}
		say "        started    ", $times[0] // '<null>', defined $times[1] ? ", delay $times[1]" : '';
		say "        retry      $times[2]" if defined $times[2] and $job->{state} eq 'retrywait';
		say "        task_state $job->{task_state}" if $job->{task_state};
		say "        inargs     $job->{out_args}" if $job->{out_args};
		say "        curvars    $job->{variables}" if $job->{variables};
		$steps = sprintf "%2d", $steps + 1;
	}

	say '---------------------------------------------------------' if $steps > 1;

	#say Dumper($job);
	say "job state $job->{state}";
	say "    finished at $job->{job_finished} took $job->{took}" if $job->{job_finished};
	say "    result      $job->{out_args}" if $job->{out_args} and $job->{job_finished};
	say '';
	return 0;
}


sub get_action {
	my $task_id = shift;
	unless ($actions{$task_id}) {
		my ($action_id, $type, $name) = $pgh->selectrow_array(
			q[select action_id, type, name from tasks join actions using (action_id) where task_id = $1],
			{},
			$task_id
		);
		die "no task $task_id?" unless $type and $name;
		$actions{$task_id} = [$action_id, $type, $name];
	}
	return @{$actions{$task_id}};
}

sub format_delay {
	local $_ = shift;
	s/^(\d+(?:\.\d+)?)$/sprintf "%.6f s", $1/e if defined $_;
	return $_;
}

