#!/usr/bin/env perl

no lib '.';

# mojo
use Mojo::Base -strict;
use Mojo::Util qw(decode);
#use Mojo::IOLoop;
use Mojo::Pg;

# stdperl
use Cwd qw(realpath);
use Data::Dumper;
use FindBin;
use Getopt::Long qw();
use Pod::Usage;
use Time::HiRes qw(time);

# cpan
use Config::Tiny;
use Pegex::Input;
use Pegex::Parser;
use Text::Table::Tiny 'generate_table';

# JobCenter
use lib realpath("$FindBin::Bin/../lib");
use JobCenter::JCC::CodeGenerator;
use JobCenter::JCC::Grammar;
use JobCenter::JCC::Receiver;
use JobCenter::JCC::VersionChecker;
use JobCenter::Util qw(slurp);

# cheating with globals
my $db;

# and global options
my $config = realpath("$FindBin::Bin/../etc/jobcenter.conf");
my ($debug, $dry_run , $force_recompile, $help, $man, $parseonly, $really,
	$replace, $tags);

exit main(@ARGV);

sub main {
	Getopt::Long::Configure(qw( bundling posix_default ));
	Getopt::Long::GetOptionsFromArray(
		\@_,
		'config=s' => \$config,
		'debug|d' => \$debug,
		'dry-run|no-commit|n' => \$dry_run,
		'force-recompile' => \$force_recompile,
		'help|h|?' => \$help,
		'man' => \$man,
		'parse-only|p' => \$parseonly,
		'really' =>  \$really,
		'replace' => \$replace,
		'tags=s' => \$tags
	) or pod2usage();
	pod2usage(-exitval => 0) if $help;
	pod2usage(-exitval => 0, verbose => 2) if $man;
	pod2usage(-message => 'Nothing to do?') unless @_;

	unless ($really) {
		die "refusing --force-recompile without --really" if $force_recompile;
		die "refusing --replace without --really" if $replace;
	}

	my ($pg, $tx);
	unless ($parseonly) {
		# what do we call ourselves
		my $clientname = "$0 [$$]";

		# make our application_name in postgresql our clientname
		$ENV{'PGAPPNAME'} = $clientname;

		my $cfg = Config::Tiny->read("$FindBin::Bin/../etc/jobcenter.conf");
		die 'Config Errror: ' . Config::Tiny->errstr() unless $cfg;
		#print Dumper($cfg);

		my $pg = Mojo::Pg->new(
			'postgresql://'
			. $cfg->{admin}->{user}
			. ':' . $cfg->{admin}->{pass}
			. '@' . ( $cfg->{pg}->{host} // '' )
			. ( ($cfg->{pg}->{port}) ? ':' . $cfg->{pg}->{port} : '' )
			. '/' . $cfg->{pg}->{db}
		);

		$db = $pg->db() or die 'db?';
		$tx  = $db->begin;
		# prevent multiple jcc's runnign concurrently
		$db->query(q|SELECT pg_advisory_lock(25068)|);
		# 25068 base 10 = jcc base 36
		say "begin" if $debug;
	}

	compile1($_) for (@_);

	if ($tx) {
		if ($dry_run) {
			say "rollback";
			# force $tx to go out of scope..
			$tx = undef;
		} else {
			say "commit";
			$tx->commit;
		}
	}

	say "the end is nigh!";
	return 0;
}

sub compile1 {
	my $wff = shift;
	my $wfsrc = decode('UTF-8', slurp($wff));
	
	my $grammar = JobCenter::JCC::Grammar->new(
		debug => $debug,
	);

	print Dumper($grammar->tree) if $debug;

	my $receiver = JobCenter::JCC::Receiver->new;

	my $parser = Pegex::Parser->new(
		grammar => $grammar,
		receiver => $receiver,
		debug => $debug,
	);

	my $start = time();
	my $wfast = $parser->parse(Pegex::Input->new(stringref => \$wfsrc));
	my $took = time() - $start;

	if ($debug) {
		print Dumper($wfast);
		print Dumper($receiver->{labels});
		printf("took %0.3f\n", $took);
	}

	if ($parseonly) {
		say "done parsing $wff";
		return;
	}

	my $jcg = JobCenter::JCC::CodeGenerator->new(
		db => $db,
		debug => $debug,
		dry_run => $dry_run,
		force_recompile => $force_recompile,
		replace => $replace,
	);

	$jcg->generate(
		wff => $wff,
		wfsrc => \$wfsrc,
		wfast => $wfast,
		labels => $receiver->labels,
		tags => $tags,
	);

	reference_version_check($db, $wfast);

	say "done with $wff?";
}



# check the versions of references to newly compiled
sub reference_version_check {
	my ($db, $wfast) = @_;

	# extract the workflow details
	my ($wf) = values %$wfast;

	my $jvc = JobCenter::JCC::VersionChecker->new(db => $db);

	# find workflows referencing this out of date action / workflow
	my $rows = $jvc->out_of_date(actions => [$wf->{workflow_name}]);

	if (@$rows > 1) {
		say "";
		say "stale references found for \"$wf->{workflow_name}\":";
		say generate_table(rows => $rows, header_row => 1);
		say "";
	}
}

__END__

=head1 NAME

jcc - JobCenter Language Compiler

=head1 SYNOPSIS

jcc [options] <filename> [<filename> ..]

	--config=<file>        specify config file
  -d	--debug	               enable debugging
  -n	--dry-run              do not commit
	--force-recompile      recompile non-changed / non-stale
	--no-commit            do not commit
  -p	--parse-only           stop after parsing
	--really               are you serious?
	--replace              replace earlier action version
	--tags                 ':' seperated version tags

=head1 OPTIONS

=over 8

=item B<config>

Specify the location of the jobcenter configuration file.
Defaults to "$FindBin::Bin/../etc/jobcenter.conf".

=item B<debug>

Enable debugging

=item B<dry-run>

The same as --no-commit

=item B<force-recompile>

Force recompilation even if:

=over

=item - the action-source did not change

=item - the workflow-source did not change and the workflow is not stale

=back

(but you should really mean it).

=item B<no-commit>

Roll back transaction at the end.

=item B<parse-only>

Stop after generating the parse-tree.

=item B<really>

You really mean to do potentially dangerous things

=item B<replace>

Update existing actions, replacing the previous version instead of creating a new version.

=item B<tags>

Version tags

=back

=head1 DESCRIPTION

The 'jcc' command tries to compile all the filenames passed in as arguments
in a single transaction.  On any error the whole transaction gets rolled
back.

=cut
